---
id: 4
text: "Worker Node Security Configuration"
type: "node"
groups:
  - id: 4.1
    text: "Worker Node Configuration Files"
    checks:
      - id: 4.1.1
        text: "Ensure that the kubelet service file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $kubeletsvc; then stat -c permissions=%a $kubeletsvc; fi' "
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          For example, chmod 600 $kubeletsvc
        auto_remediation:
          command: "chmod 600 $kubeletsvc"
          description: "Set kubelet service file permissions to 600"
          requires_sudo: true
          dry_run_safe: true
        scored: true

      - id: 4.1.2
        text: "Ensure that the kubelet service file ownership is set to root:root (Automated)"
        audit: '/bin/sh -c "if test -e $kubeletsvc; then stat -c %U:%G $kubeletsvc; else echo \"File not found\"; fi"'
        tests:
          bin_op: or
          test_items:
            - flag: root:root
            - flag: "File not found"
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          For example,
          chown root:root $kubeletsvc
        auto_remediation:
          command: "chown root:root $kubeletsvc"
          description: "Set kubelet service file ownership to root:root"
          requires_sudo: true
          dry_run_safe: true
        scored: true

      - id: 4.1.3
        text: "If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive (Manual)"
        audit: "/bin/sh -c 'if test -e $proxykubeconfig; then stat -c permissions=%a $proxykubeconfig; fi' "
        tests:
          bin_op: or
          test_items:
            - flag: "permissions"
              set: true
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          For example,
          chmod 600 $proxykubeconfig
        scored: false

      - id: 4.1.4
        text: "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)"
        audit: "/bin/sh -c 'if test -e $proxykubeconfig; then stat -c %U:%G $proxykubeconfig; fi' "
        tests:
          bin_op: or
          test_items:
            - flag: root:root
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          For example, chown root:root $proxykubeconfig
        scored: false

      - id: 4.1.5
        text: "Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $kubeletkubeconfig; then stat -c permissions=%a $kubeletkubeconfig; fi' "
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          For example,
          chmod 600 $kubeletkubeconfig
        auto_remediation:
          command: "chmod 600 $kubeletkubeconfig"
          description: "Set kubelet kubeconfig file permissions to 600"
          requires_sudo: true
          dry_run_safe: true
        scored: true

      - id: 4.1.6
        text: "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $kubeletkubeconfig; then stat -c %U:%G $kubeletkubeconfig; fi' "
        tests:
          test_items:
            - flag: root:root
        remediation: |
          Run the below command (based on the file location on your system) on the each worker node.
          For example,
          chown root:root $kubeletkubeconfig
        auto_remediation:
          command: "chown root:root $kubeletkubeconfig"
          description: "Set kubelet kubeconfig file ownership to root:root"
          requires_sudo: true
          dry_run_safe: true
        scored: true

      - id: 4.1.7
        text: "Ensure that the certificate authorities file permissions are set to 600 or more restrictive (Manual)"
        audit: |
          CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}' | uniq)
          if test -z $CAFILE; then CAFILE=$kubeletcafile; fi
          if test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the following command to modify the file permissions of the
          --client-ca-file chmod 600 <filename>
        scored: false

      - id: 4.1.8
        text: "Ensure that the client certificate authorities file ownership is set to root:root (Manual)"
        audit: |
          CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}' | uniq)
          if test -z $CAFILE; then CAFILE=$kubeletcafile; fi
          if test -e $CAFILE; then stat -c %U:%G $CAFILE; fi
        tests:
          test_items:
            - flag: root:root
              compare:
                op: eq
                value: root:root
        remediation: |
          Run the following command to modify the ownership of the --client-ca-file.
          chown root:root <filename>
        scored: false

      - id: 4.1.9
        text: "If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $kubeletconf; then stat -c permissions=%a $kubeletconf; fi' "
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the following command (using the config file location identified in the Audit step)
          chmod 600 $kubeletconf
        auto_remediation:
          command: "chmod 600 $kubeletconf"
          description: "Set kubelet config.yaml file permissions to 600"
          requires_sudo: true
          dry_run_safe: true
        scored: true

      - id: 4.1.10
        text: "If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $kubeletconf; then stat -c %U:%G $kubeletconf; fi' "
        tests:
          test_items:
            - flag: root:root
        remediation: |
          Run the following command (using the config file location identified in the Audit step)
          chown root:root $kubeletconf
        auto_remediation:
          command: "chown root:root $kubeletconf"
          description: "Set kubelet config.yaml file ownership to root:root"
          requires_sudo: true
          dry_run_safe: true
        scored: true

  - id: 4.2
    text: "Kubelet"
    checks:
      - id: 4.2.1
        text: "Ensure that the --anonymous-auth argument is set to false (Automated)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              path: "{.authentication.anonymous.enabled}"
              compare:
                op: eq
                value: false
        remediation: |
          If using a Kubelet config file, edit the file to set `authentication: anonymous: enabled` to
          `false`.
          If using executable arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
          `--anonymous-auth=false`
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file - handle YAML structure properly
              # First, remove any existing anonymous section completely
              if grep -q "anonymous:" "$kubeletconf"; then
                # Create a backup first
                cp "$kubeletconf" "$kubeletconf.backup"
                # Use awk to remove anonymous section and all its nested properties
                awk '
                BEGIN { skip = 0; indent_level = 0 }
                /^[[:space:]]*anonymous:/ { 
                    skip = 1
                    indent_level = length($0) - length($1)
                    next 
                }
                skip && /^[[:space:]]*[a-zA-Z-][^:]*:/ {
                    current_indent = length($0) - length($1)
                    if (current_indent <= indent_level) {
                        skip = 0
                    }
                }
                !skip { print }
                ' "$kubeletconf" > "$kubeletconf.tmp" && mv "$kubeletconf.tmp" "$kubeletconf"
              fi
              
              # Now add the correct anonymous section
              if grep -q "authentication:" "$kubeletconf"; then
                # Add anonymous section after authentication
                sed -i '/authentication:/a\  anonymous:\n    enabled: false' "$kubeletconf"
              else
                # Add both authentication and anonymous sections
                echo "authentication:" >> "$kubeletconf"
                echo "  anonymous:" >> "$kubeletconf"
                echo "    enabled: false" >> "$kubeletconf"
              fi
            else
              # Update service file
              if [ -f "$kubeletsvc" ]; then
                sed -i 's/KUBELET_SYSTEM_PODS_ARGS="/KUBELET_SYSTEM_PODS_ARGS="--anonymous-auth=false /' "$kubeletsvc"
              fi
            fi
            # Restart kubelet service
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set --anonymous-auth=false in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: true

      - id: 4.2.2
        text: "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --authorization-mode
              path: "{.authorization.mode}"
              compare:
                op: nothave
                value: AlwaysAllow
        remediation: |
          If using a Kubelet config file, edit the file to set `authorization.mode` to Webhook. If
          using executable arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameter in KUBELET_AUTHZ_ARGS variable.
          --authorization-mode=Webhook
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            #!/bin/bash
            
            # Kiểm tra xem authorization section có tồn tại không
            if grep -q "authorization:" "$kubeletconf"; then
              # Authorization section tồn tại, kiểm tra mode
              if grep -q "mode:" "$kubeletconf"; then
                # Lấy giá trị mode hiện tại
                current_mode=$(grep -A 1 "authorization:" "$kubeletconf" | grep "mode:" | sed 's/.*mode:[[:space:]]*//' | tr -d '"' | tr -d "'")
                
                # Kiểm tra nếu có AlwaysAllow
                if echo "$current_mode" | grep -q "AlwaysAllow"; then
                  # Xóa AlwaysAllow và các dấu phẩy/khoảng trắng thừa
                  new_mode=$(echo "$current_mode" | sed 's/AlwaysAllow//g' | sed 's/,\s*,/,/g' | sed 's/^\s*,\s*//g' | sed 's/,\s*$//g' | sed 's/\s\+/ /g' | xargs)
                  
                  # Kiểm tra nếu không có Webhook thì thêm vào
                  if ! echo "$new_mode" | grep -qi "Webhook"; then
                    if [ -z "$new_mode" ]; then
                      new_mode="Webhook"
                    else
                      new_mode="Webhook, $new_mode"
                    fi
                  fi
                  
                  # Nếu mode rỗng sau khi xóa AlwaysAllow, set thành Webhook
                  if [ -z "$new_mode" ]; then
                    new_mode="Webhook"
                  fi
                  
                  # Thay thế mode trong file
                  sed -i "/^[[:space:]]*mode:/c\  mode: $new_mode" "$kubeletconf"
                else
                  # Không có AlwaysAllow, chỉ kiểm tra xem có Webhook chưa
                  if ! echo "$current_mode" | grep -qi "Webhook"; then
                    if [ -z "$current_mode" ] || [ "$current_mode" = "null" ]; then
                      new_mode="Webhook"
                    else
                      new_mode="Webhook, $current_mode"
                    fi
                    sed -i "/^[[:space:]]*mode:/c\  mode: $new_mode" "$kubeletconf"
                  fi
                fi
              else
                # Có authorization nhưng không có mode, thêm mode: Webhook
                sed -i '/^authorization:/a\  mode: Webhook' "$kubeletconf"
              fi
            else
              # Không có authorization section, thêm mới
              sed -i '/^apiVersion:/a\authorization:\n  mode: Webhook' "$kubeletconf"
            fi
            
            # Restart kubelet service
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Remove AlwaysAllow and ensure Webhook is set in authorization.mode"
          requires_sudo: true
          dry_run_safe: false
        scored: true


      - id: 4.2.3
        text: "Ensure that the --client-ca-file argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --client-ca-file
              path: "{.authentication.x509.clientCAFile}"
        remediation: |
          If using a Kubelet config file, edit the file to set `authentication.x509.clientCAFile` to
          the location of the client CA file.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameter in KUBELET_AUTHZ_ARGS variable.
          --client-ca-file=<path/to/client-ca-file>
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file - handle YAML structure properly
              if grep -q "authentication:" "$kubeletconf"; then
                # Check if x509 section exists
                if grep -q "x509:" "$kubeletconf"; then
                  # Update existing clientCAFile
                  sed -i 's/clientCAFile:.*/clientCAFile: \/etc\/kubernetes\/pki\/ca.crt/' "$kubeletconf"
                else
                  # Add x509 section after authentication
                  sed -i '/authentication:/a\  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt' "$kubeletconf"
                fi
              else
                # Add authentication section with x509
                sed -i '/^apiVersion:/a\authentication:\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt' "$kubeletconf"
              fi
            else
              # Update service file
              sed -i 's/KUBELET_AUTHZ_ARGS="/KUBELET_AUTHZ_ARGS="--client-ca-file=/etc/kubernetes/pki/ca.crt /' "$kubeletsvc"
            fi
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set --client-ca-file in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: true

      - id: 4.2.4
        text: "Verify that the --read-only-port argument is set to 0 (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--read-only-port"
              path: "{.readOnlyPort}"
              compare:
                op: eq
                value: 0
            - flag: "--read-only-port"
              path: "{.readOnlyPort}"
              set: false
        remediation: |
          If using a Kubelet config file, edit the file to set `readOnlyPort` to 0.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
          --read-only-port=0
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        scored: false

      - id: 4.2.5
        text: "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              path: "{.streamingConnectionIdleTimeout}"
              compare:
                op: noteq
                value: 0
            - flag: --streaming-connection-idle-timeout
              path: "{.streamingConnectionIdleTimeout}"
              set: false
          bin_op: or
        remediation: |
          If using a Kubelet config file, edit the file to set `streamingConnectionIdleTimeout` to a
          value other than 0.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
          --streaming-connection-idle-timeout=5m
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        scored: false

      - id: 4.2.6
        text: "Ensure that the --make-iptables-util-chains argument is set to true (Automated)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --make-iptables-util-chains
              path: "{.makeIPTablesUtilChains}"
              compare:
                op: eq
                value: true
            - flag: --make-iptables-util-chains
              path: "{.makeIPTablesUtilChains}"
              set: false
          bin_op: or
        remediation: |
          If using a Kubelet config file, edit the file to set `makeIPTablesUtilChains` to `true`.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          remove the --make-iptables-util-chains argument from the
          KUBELET_SYSTEM_PODS_ARGS variable.
          Based on your system, restart the kubelet service. For example:
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            #!/bin/bash
            KUBELET_CONFIG="${kubeletconf:-/var/lib/kubelet/config.yaml}"
            
            # Chỉ remediate nếu explicitly set false
            if grep -q "^makeIPTablesUtilChains: false" "$KUBELET_CONFIG"; then
              echo "Remediating makeIPTablesUtilChains: false -> true"
              sed -i 's/^makeIPTablesUtilChains: false/makeIPTablesUtilChains: true/' "$KUBELET_CONFIG"
              systemctl daemon-reload
              systemctl restart kubelet.service
            else
              echo "No remediation needed - already compliant"
            fi
          description: "Set makeIPTablesUtilChains to true if explicitly set to false"
          requires_sudo: true
          dry_run_safe: false
        scored: true

      - id: 4.2.7
        text: "Ensure that the --hostname-override argument is not set (Manual)"
        # This is one of those properties that can only be set as a command line argument.
        # To check if the property is set as expected, we need to parse the kubelet command
        # instead reading the Kubelet Configuration file.
        audit: "/bin/ps -fC $kubeletbin"
        tests:
          test_items:
            - flag: --hostname-override
              set: false
        remediation: |
          Edit the kubelet service file $kubeletsvc
          on each worker node and remove the --hostname-override argument from the
          KUBELET_SYSTEM_PODS_ARGS variable.
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            # Remove --hostname-override argument from service file
            sed -i 's/--hostname-override[^ ]*//g' "$kubeletsvc"
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Remove --hostname-override argument from kubelet service file"
          requires_sudo: true
          dry_run_safe: false
        scored: false

      - id: 4.2.8
        text: "Ensure that the eventRecordQPS argument is set to a level which ensures appropriate event capture (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --event-qps
              path: "{.eventRecordQPS}"
              compare:
                op: gte
                value: 0
            - flag: --event-qps
              path: "{.eventRecordQPS}"
              set: false
          bin_op: or
        remediation: |
          If using a Kubelet config file, edit the file to set `eventRecordQPS` to an appropriate level.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file
              sed -i 's/eventRecordQPS:/eventRecordQPS: 5/' "$kubeletconf"
            else
              # Update service file
              sed -i 's/KUBELET_SYSTEM_PODS_ARGS="/KUBELET_SYSTEM_PODS_ARGS="--event-qps=5 /' "$kubeletsvc"
            fi
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set --event-qps=5 in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: false

      - id: 4.2.9
        text: "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cert-file
              path: "{.tlsCertFile}"
            - flag: --tls-private-key-file
              path: "{.tlsPrivateKeyFile}"
        remediation: |
          If using a Kubelet config file, edit the file to set `tlsCertFile` to the location
          of the certificate file to use to identify this Kubelet, and `tlsPrivateKeyFile`
          to the location of the corresponding private key file.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
          --tls-cert-file=<path/to/tls-certificate-file>
          --tls-private-key-file=<path/to/tls-key-file>
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file
              sed -i 's/tlsCertFile:/tlsCertFile: /var/lib/kubelet/pki/kubelet.crt/' "$kubeletconf"
              sed -i 's/tlsPrivateKeyFile:/tlsPrivateKeyFile: /var/lib/kubelet/pki/kubelet.key/' "$kubeletconf"
            else
              # Update service file
              sed -i 's/KUBELET_CERTIFICATE_ARGS="/KUBELET_CERTIFICATE_ARGS="--tls-cert-file=/var/lib/kubelet/pki/kubelet.crt --tls-private-key-file=/var/lib/kubelet/pki/kubelet.key /' "$kubeletsvc"
            fi
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set TLS certificate and private key file paths in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: false

      - id: 4.2.10
        text: "Ensure that the --rotate-certificates argument is not set to false (Automated)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --rotate-certificates
              path: "{.rotateCertificates}"
              compare:
                op: eq
                value: true
        remediation: |
          If using a Kubelet config file, edit the file to add the line rotateCertificates: true or
          remove it altogether to use the default value.
          If using command line arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS
          variable.
          Based on your system, restart the kubelet service. For example,
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            #!/bin/bash
            KUBELET_CONFIG="${kubeletconf:-/var/lib/kubelet/config.yaml}"
            
            if grep -q "^rotateCertificates:" "$KUBELET_CONFIG"; then
              CURRENT_VALUE=$(grep "^rotateCertificates:" "$KUBELET_CONFIG" | awk '{print $2}')
              if [ "$CURRENT_VALUE" != "true" ]; then
                sed -i "s/^rotateCertificates:.*$/rotateCertificates: true/" "$KUBELET_CONFIG"
                systemctl daemon-reload
                systemctl restart kubelet.service
              fi
            else
              sed -i '/^apiVersion:.*/a rotateCertificates: true' "$KUBELET_CONFIG"
              systemctl daemon-reload
              systemctl restart kubelet.service
            fi
          description: "Set rotateCertificates to true"
          requires_sudo: true
          dry_run_safe: false
        scored: true
        
                

      - id: 4.2.11
        text: "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          bin_op: or
          test_items:
            - flag: RotateKubeletServerCertificate
              path: "{.featureGates.RotateKubeletServerCertificate}"
              compare:
                op: nothave
                value: false
            - flag: RotateKubeletServerCertificate
              path: "{.featureGates.RotateKubeletServerCertificate}"
              set: false
        remediation: |
          Edit the kubelet service file $kubeletsvc
          on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.
          --feature-gates=RotateKubeletServerCertificate=true
          Based on your system, restart the kubelet service. For example:
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file
              sed -i 's/featureGates:/featureGates:\n  RotateKubeletServerCertificate: true/' "$kubeletconf"
            else
              # Update service file
              sed -i 's/KUBELET_CERTIFICATE_ARGS="/KUBELET_CERTIFICATE_ARGS="--feature-gates=RotateKubeletServerCertificate=true /' "$kubeletsvc"
            fi
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set RotateKubeletServerCertificate feature gate to true in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: false

      - id: 4.2.12
        text: "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              path: "{range .tlsCipherSuites[:]}{}{','}{end}"
              compare:
                op: valid_elements
                value: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        remediation: |
          If using a Kubelet config file, edit the file to set `tlsCipherSuites` to
          TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
          TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
          TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
          TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
          or to a subset of these values.
          If using executable arguments, edit the kubelet service file
          $kubeletsvc on each worker node and
          set the --tls-cipher-suites parameter as follows, or to a subset of these values.
          --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
          TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
          TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
          TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
          Based on your system, restart the kubelet service. For example:
          systemctl daemon-reload
          systemctl restart kubelet.service
        auto_remediation:
          command: |
            CIPHER_SUITES="TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file
              sed -i "s/tlsCipherSuites:/tlsCipherSuites: [$CIPHER_SUITES]/" "$kubeletconf"
            else
              # Update service file
              sed -i "s/KUBELET_SYSTEM_PODS_ARGS="/KUBELET_SYSTEM_PODS_ARGS="--tls-cipher-suites=$CIPHER_SUITES /" "$kubeletsvc"
            fi
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set strong TLS cipher suites in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: false

      - id: 4.2.13
        text: "Ensure that a limit is set on pod PIDs (Manual)"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "sudo /bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --pod-max-pids
              path: "{.podPidsLimit}"
        remediation: |
          Decide on an appropriate level for this parameter and set it,
          either via the --pod-max-pids command line parameter or the PodPidsLimit configuration file setting.
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$kubeletconf" ]; then
              # Update config file
              sed -i 's/podPidsLimit:/podPidsLimit: 1000/' "$kubeletconf"
            else
              # Update service file
              sed -i 's/KUBELET_SYSTEM_PODS_ARGS="/KUBELET_SYSTEM_PODS_ARGS="--pod-max-pids=1000 /' "$kubeletsvc"
            fi
            systemctl daemon-reload
            systemctl restart kubelet.service
          description: "Set pod PIDs limit to 1000 in kubelet configuration"
          requires_sudo: true
          dry_run_safe: false
        scored: false

  - id: 4.3
    text: "kube-proxy"
    checks:
      - id: 4.3.1
        text: "Ensure that the kube-proxy metrics service is bound to localhost (Automated)"
        audit: "/bin/ps -fC $proxybin"
        audit_config: "/bin/sh -c 'if test -e $proxykubeconfig; then cat $proxykubeconfig; fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "--metrics-bind-address"
              path: "{.metricsBindAddress}"
              compare:
                op: has
                value: "127.0.0.1"
            - flag: "--metrics-bind-address"
              path: "{.metricsBindAddress}"
              set: false
        remediation: |
          Modify or remove any values which bind the metrics service to a non-localhost address.
          The default value is 127.0.0.1:10249.
        auto_remediation:
          command: |
            # Check if using config file or service file
            if [ -f "$proxykubeconfig" ]; then
              # Update config file
              sed -i 's/metricsBindAddress:/metricsBindAddress: 127.0.0.1:10249/' "$proxykubeconfig"
            else
              # Update service file or command line
              sed -i 's/--metrics-bind-address=[^ ]*/--metrics-bind-address=127.0.0.1:10249/g' "$proxykubeconfig"
            fi
            systemctl daemon-reload
            systemctl restart kube-proxy.service
          description: "Set kube-proxy metrics service to bind to localhost (127.0.0.1:10249)"
          requires_sudo: true
          dry_run_safe: false
        scored: true
